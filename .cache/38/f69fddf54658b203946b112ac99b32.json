{"id":"../node_modules/@mapbox/mapbox-sdk/lib/browser/browser-layer.js","dependencies":[{"name":"/srv/atlas/atlas-web/package.json","includedInParent":true,"mtime":1589460883313},{"name":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/package.json","includedInParent":true,"mtime":499162500000},{"name":"../classes/mapi-response","loc":{"line":3,"column":27},"parent":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/browser/browser-layer.js","resolved":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/classes/mapi-response.js"},{"name":"../classes/mapi-error","loc":{"line":4,"column":24},"parent":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/browser/browser-layer.js","resolved":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/classes/mapi-error.js"},{"name":"../constants","loc":{"line":5,"column":24},"parent":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/browser/browser-layer.js","resolved":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/constants.js"},{"name":"../helpers/parse-headers","loc":{"line":6,"column":27},"parent":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/browser/browser-layer.js","resolved":"/srv/atlas/atlas-web/node_modules/@mapbox/mapbox-sdk/lib/helpers/parse-headers.js"}],"generated":{"js":"'use strict';\n\nvar MapiResponse = require('../classes/mapi-response');\n\nvar MapiError = require('../classes/mapi-error');\n\nvar constants = require('../constants');\n\nvar parseHeaders = require('../helpers/parse-headers'); // Keys are request IDs, values are XHRs.\n\n\nvar requestsUnderway = {};\n\nfunction browserAbort(request) {\n  var xhr = requestsUnderway[request.id];\n  if (!xhr) return;\n  xhr.abort();\n  delete requestsUnderway[request.id];\n}\n\nfunction createResponse(request, xhr) {\n  return new MapiResponse(request, {\n    body: xhr.response,\n    headers: parseHeaders(xhr.getAllResponseHeaders()),\n    statusCode: xhr.status\n  });\n}\n\nfunction normalizeBrowserProgressEvent(event) {\n  var total = event.total;\n  var transferred = event.loaded;\n  var percent = 100 * transferred / total;\n  return {\n    total: total,\n    transferred: transferred,\n    percent: percent\n  };\n}\n\nfunction sendRequestXhr(request, xhr) {\n  return new Promise(function (resolve, reject) {\n    xhr.onprogress = function (event) {\n      request.emitter.emit(constants.EVENT_PROGRESS_DOWNLOAD, normalizeBrowserProgressEvent(event));\n    };\n\n    var file = request.file;\n\n    if (file) {\n      xhr.upload.onprogress = function (event) {\n        request.emitter.emit(constants.EVENT_PROGRESS_UPLOAD, normalizeBrowserProgressEvent(event));\n      };\n    }\n\n    xhr.onerror = function (error) {\n      reject(error);\n    };\n\n    xhr.onabort = function () {\n      var mapiError = new MapiError({\n        request: request,\n        type: constants.ERROR_REQUEST_ABORTED\n      });\n      reject(mapiError);\n    };\n\n    xhr.onload = function () {\n      delete requestsUnderway[request.id];\n\n      if (xhr.status < 200 || xhr.status >= 400) {\n        var mapiError = new MapiError({\n          request: request,\n          body: xhr.response,\n          statusCode: xhr.status\n        });\n        reject(mapiError);\n        return;\n      }\n\n      resolve(xhr);\n    };\n\n    var body = request.body; // matching service needs to send a www-form-urlencoded request\n\n    if (typeof body === 'string') {\n      xhr.send(body);\n    } else if (body) {\n      xhr.send(JSON.stringify(body));\n    } else if (file) {\n      xhr.send(file);\n    } else {\n      xhr.send();\n    }\n\n    requestsUnderway[request.id] = xhr;\n  }).then(function (xhr) {\n    return createResponse(request, xhr);\n  });\n} // The accessToken argument gives this function flexibility\n// for Mapbox's internal client.\n\n\nfunction createRequestXhr(request, accessToken) {\n  var url = request.url(accessToken);\n  var xhr = new window.XMLHttpRequest();\n  xhr.open(request.method, url);\n  Object.keys(request.headers).forEach(function (key) {\n    xhr.setRequestHeader(key, request.headers[key]);\n  });\n  return xhr;\n}\n\nfunction browserSend(request) {\n  return Promise.resolve().then(function () {\n    var xhr = createRequestXhr(request, request.client.accessToken);\n    return sendRequestXhr(request, xhr);\n  });\n}\n\nmodule.exports = {\n  browserAbort: browserAbort,\n  sendRequestXhr: sendRequestXhr,\n  browserSend: browserSend,\n  createRequestXhr: createRequestXhr\n};"},"sourceMaps":null,"error":null,"hash":"c9ab0b35be481cc8b9e937d438399679","cacheData":{"env":{}}}